<?php

namespace App\Proxies\__CG__\Persium\Station\Domain\Entities\SensorType;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SensorType extends \Persium\Station\Domain\Entities\SensorType\SensorType implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'id', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'uuid', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'created_at', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'updated_at', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'deleted_at', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'sensors', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'cross_sensitivities', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'raw_name', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'name', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'display_name', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'type', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'e_multi', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'e_pow_multi', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'm_multi', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'molar_mass', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'constant', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'p_nom'];
        }

        return ['__isInitialized__', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'id', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'uuid', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'created_at', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'updated_at', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'deleted_at', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'sensors', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'cross_sensitivities', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'raw_name', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'name', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'display_name', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'type', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'e_multi', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'e_pow_multi', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'm_multi', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'molar_mass', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'constant', '' . "\0" . 'Persium\\Station\\Domain\\Entities\\SensorType\\SensorType' . "\0" . 'p_nom'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SensorType $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getID(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getID', []);

        return parent::getID();
    }

    /**
     * {@inheritDoc}
     */
    public function getUUID(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUUID', []);

        return parent::getUUID();
    }

    /**
     * {@inheritDoc}
     */
    public function setUUID(string $uuid): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUUID', [$uuid]);

        parent::setUUID($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function getRawName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRawName', []);

        return parent::getRawName();
    }

    /**
     * {@inheritDoc}
     */
    public function setRawName(string $raw_name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRawName', [$raw_name]);

        parent::setRawName($raw_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayName', []);

        return parent::getDisplayName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayName(string $display_name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayName', [$display_name]);

        parent::setDisplayName($display_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getType(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(int $type): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getEMulti(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEMulti', []);

        return parent::getEMulti();
    }

    /**
     * {@inheritDoc}
     */
    public function setEMulti(float $e_multi): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEMulti', [$e_multi]);

        parent::setEMulti($e_multi);
    }

    /**
     * {@inheritDoc}
     */
    public function getEPowMulti(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEPowMulti', []);

        return parent::getEPowMulti();
    }

    /**
     * {@inheritDoc}
     */
    public function setEPowMulti(float $e_pow_multi): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEPowMulti', [$e_pow_multi]);

        parent::setEPowMulti($e_pow_multi);
    }

    /**
     * {@inheritDoc}
     */
    public function getMMulti(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMMulti', []);

        return parent::getMMulti();
    }

    /**
     * {@inheritDoc}
     */
    public function setMMulti(float $m_multi): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMMulti', [$m_multi]);

        parent::setMMulti($m_multi);
    }

    /**
     * {@inheritDoc}
     */
    public function getMolarMass(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMolarMass', []);

        return parent::getMolarMass();
    }

    /**
     * {@inheritDoc}
     */
    public function setMolarMass(float $molar_mass): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMolarMass', [$molar_mass]);

        parent::setMolarMass($molar_mass);
    }

    /**
     * {@inheritDoc}
     */
    public function getConstant(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConstant', []);

        return parent::getConstant();
    }

    /**
     * {@inheritDoc}
     */
    public function setConstant(float $constant): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConstant', [$constant]);

        parent::setConstant($constant);
    }

    /**
     * {@inheritDoc}
     */
    public function getPNom(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPNom', []);

        return parent::getPNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setPNom(float $p_nom): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPNom', [$p_nom]);

        parent::setPNom($p_nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): \DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): \DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', []);

        parent::setUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', []);

        parent::setDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getSensors(): ?\Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSensors', []);

        return parent::getSensors();
    }

    /**
     * {@inheritDoc}
     */
    public function addSensor(\Persium\Station\Domain\Entities\Station\StationSensor $sensor): \Persium\Station\Domain\Entities\Station\StationSensor
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSensor', [$sensor]);

        return parent::addSensor($sensor);
    }

    /**
     * {@inheritDoc}
     */
    public function setCrossSensitivities(?\Doctrine\Common\Collections\Collection $cross_sensitivities): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCrossSensitivities', [$cross_sensitivities]);

        parent::setCrossSensitivities($cross_sensitivities);
    }

    /**
     * {@inheritDoc}
     */
    public function getCrossSensitivities(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCrossSensitivities', []);

        return parent::getCrossSensitivities();
    }

}
